@using Microsoft.Extensions.DependencyInjection
@using Microsoft.Identity.Web
@using Service

@inject ITokenAcquisition TokenAcquisition
@inject TokenProvider TokenProvider
@inject ILogger<App> Logger

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Catalogue Scanner Configuration UI</title>
    <base href="/" />
    <link href="CatalogueScanner.ConfigurationUI.styles.css" rel="stylesheet" />
    <script src="_content/MatBlazor/dist/matBlazor.js"></script>
    <link href="_content/MatBlazor/dist/matBlazor.css" rel="stylesheet" />
    <link href="css/site.css" rel="stylesheet" />
    <HeadOutlet @rendermode="InteractiveServer" />
</head>
<body class="mat">
    <Routes @rendermode="InteractiveServer" />

    <script src="BlazorInterop.js"></script>
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/CurrieTechnologies.Razor.Clipboard/clipboard.min.js"></script>

    <MatPortalHost @rendermode="InteractiveServer" />
    <MatToastContainer @rendermode="InteractiveServer" />
</body>
</html>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext is null)
        {
            throw new InvalidOperationException($"{nameof(HttpContext)} parameter is null");
        }

        using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(30));

        cts.Token.Register(() => Logger.LogError("Token cancelled"));

        var accessToken = await TokenAcquisition
            .GetAccessTokenForUserAsync([".default"], tokenAcquisitionOptions: new() { CancellationToken = cts.Token })
            .ConfigureAwait(true);

        Logger.LogWarning("Access Token: {Token}", accessToken);

        string[] importantHeaders = [
            "X-MS-TOKEN-AAD-ID-TOKEN",
            "X-MS-CLIENT-PRINCIPAL-IDP",
            "X-MS-TOKEN-AAD-ACCESS-TOKEN"
        ];

        foreach (var header in importantHeaders)
        {
            Logger.LogWarning("Header: {Header} = {Value}", header, HttpContext.Request.Headers[header]);
        }

        TokenProvider.AccessToken = accessToken;

        await base.OnInitializedAsync();
    }
}
