@using Microsoft.Extensions.DependencyInjection
@using Microsoft.Identity.Web
@using Service

@inject TokenProvider TokenProvider

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Catalogue Scanner Configuration UI</title>
    <base href="/" />
    <link href="CatalogueScanner.ConfigurationUI.styles.css" rel="stylesheet" />
    <script src="_content/MatBlazor/dist/matBlazor.js"></script>
    <link href="_content/MatBlazor/dist/matBlazor.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="css/site.css" rel="stylesheet" />
    <HeadOutlet @rendermode="InteractiveServer" />
</head>
<body>
    <Routes @rendermode="InteractiveServer" />

    <script src="BlazorInterop.js"></script>
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/CurrieTechnologies.Razor.Clipboard/clipboard.min.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
</body>
</html>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpContext is null)
        {
            throw new InvalidOperationException($"{nameof(HttpContext)} parameter is null");
        }

        var accessToken = await HttpContext.RequestServices
            .GetRequiredService<ITokenAcquisition>()
            .GetAccessTokenForUserAsync(new string[] { ".default" })
            .ConfigureAwait(true);

        TokenProvider.AccessToken = accessToken;

        await base.OnInitializedAsync();
    }
}
