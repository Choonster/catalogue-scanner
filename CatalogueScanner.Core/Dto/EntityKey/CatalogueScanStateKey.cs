using System;

namespace CatalogueScanner.Core.Dto.EntityKey
{
    public class CatalogueScanStateKey
    {
        /// <summary>
        /// The type of catalogue, this should be unique for each catalogue app/system; e.g. SaleFinder.
        /// </summary>
        public string CatalogueType { get; }

        /// <summary>
        /// The store that the catalogue belongs to.
        /// </summary>
        public string Store { get; }

        /// <summary>
        /// The ID of the catalogue. Each catalogue within a type/store should have a unique ID.
        /// </summary>
        public string CatalogueId { get; }

        public CatalogueScanStateKey(string catalogueType, string store, string catalogueId)
        {
            CatalogueType = catalogueType;
            Store = store;
            CatalogueId = catalogueId;
        }

        /// <summary>
        /// Creates a <see cref="CatalogueScanStateKey"/> instance from the specified key string generated by <see cref="ToString"/>.
        /// </summary>
        /// <param name="key">The key string</param>
        /// <returns>The key object</returns>
        public static CatalogueScanStateKey FromString(string key)
        {
            var parts = key.Split('|', 3);
            if (parts.Length != 3)
            {
                throw new ArgumentException("Invalid Entity Key, must be in the form <CatalogueType>|<Store>|<CatalogueId>");
            }

            var catalogueType = parts[0];
            var store = parts[1];
            var catalogueId = parts[2];

            return new CatalogueScanStateKey(catalogueType, store, catalogueId);
        }

        /// <summary>
        /// Generates a key string for use with Durable Entities.
        /// </summary>
        /// <returns>The key string</returns>
        public override string ToString() => $"{CatalogueType}|{Store}|{CatalogueId}";
    }
}
