// Originally generated by quicktype (https://quicktype.io/), then manually cleaned up

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace CatalogueScanner.WebScraping.Common.Dto.ColesOnline
{
    public partial class ColrsCatalogEntryList
    {
        [JsonProperty("type")]
        public string? Type { get; set; }

        [JsonProperty("categories")]
        public Categories? Categories { get; set; }

        [JsonProperty("facets")]
        public IEnumerable<Facet> Facets { get; } = new List<Facet>();

        [JsonProperty("products")]
        public IEnumerable<Product> Products { get; } = new List<Product>();

        [JsonProperty("searchInfo")]
        public SearchInfo? SearchInfo { get; set; }
    }

    public partial class Categories
    {
        [JsonProperty("parentCatgroup_id_search")]
        public IDictionary<string, string> ParentCatgroupIdSearch { get; } = new Dictionary<string, string>();
    }

    public partial class Facet
    {
        [JsonProperty("values")]
        public IEnumerable<Value> Values { get; } = new List<Value>();

        [JsonProperty("name")]
        public string? Name { get; set; }

        [JsonProperty("showEspot")]
        public bool ShowEspot { get; set; }
    }

    public partial class Value
    {
        [JsonProperty("count")]
        public long Count { get; set; }

        [JsonProperty("label")]
        public string? Label { get; set; }

        [JsonProperty("value")]
        public string? ValueValue { get; set; }
    }

    public partial class Product
    {
        [JsonProperty("price")]
        public Price? Price { get; set; }

        [JsonProperty("attributesMap")]
        public AttributesMap? AttributesMap { get; set; }

        [JsonProperty("shortDescription")]
        public string? ShortDescription { get; set; }

        [JsonProperty("singleSKUCatalogEntryID")]
        public string? SingleSkuCatalogEntryId { get; set; }

        [JsonProperty("manufacturer")]
        public string? Manufacturer { get; set; }

        [JsonProperty("name")]
        public string? Name { get; set; }

        [JsonProperty("partNumber")]
        public string? PartNumber { get; set; }

        [JsonProperty("seoToken")]
        public string? SeoToken { get; set; }

        [JsonProperty("thumbnail")]
        public string? Thumbnail { get; set; }

        [JsonProperty("uniqueID")]

        public string? UniqueId { get; set; }

        [JsonProperty("purchaseLimit")]
        public string? PurchaseLimit { get; set; }

        [JsonProperty("unitPrice")]
        public string? UnitPrice { get; set; }

        [JsonProperty("tickettype")]
        [JsonConverter(typeof(TicketTypeConverter))]
        public TicketType TicketType { get; set; }

        [JsonProperty("promo_min_qty")]
        public string? PromoMinQty { get; set; }

        [JsonProperty("promo_reward")]
        public string? PromoReward { get; set; }

        [JsonProperty("promo_type")]
        [JsonConverter(typeof(StringEnumConverter))]
        public PromoType? PromoType { get; set; }

        [JsonProperty("promo_desc")]
        public string? PromoDesc { get; set; }

        [JsonProperty("promo_id")]

        public string? PromoId { get; set; }

        [JsonProperty("available")]
        public bool? Available { get; set; }

        [JsonProperty("rating")]
        public string? Rating { get; set; }

        [JsonProperty("reviews")]
        public long Reviews { get; set; }
    }

    public partial class AttributesMap
    {
        [JsonProperty("AVERAGESIZE")]
        public IEnumerable<string> AverageSize { get; } = new List<string>();

        [JsonProperty("DELIVERYRESTRICTIONS")]
        public IEnumerable<string> DeliveryRestrictions { get; } = new List<string>();

        [JsonProperty("ONLINESIZEDESCRIPTION")]
        public IEnumerable<string> OnlinesizeDescription { get; } = new List<string>();

        [JsonProperty("LIQUORAGERESTRICTIONFLAG")]
        public IEnumerable<string> LiquorAgeRestrictionFlag { get; } = new List<string>();

        [JsonProperty("PRIMARYAISLE")]
        public IEnumerable<string> PrimaryAisle { get; } = new List<string>();

        [JsonProperty("WEIGHTEDITEMINDICATOR")]
        public IEnumerable<string> WeightedItemIndicator { get; } = new List<string>();

        [JsonProperty("EXCLUDEFROMSUBSTITUTIONFLAG")]
        public IEnumerable<string> ExcludeFromSubstitutionFlag { get; } = new List<string>();

        [JsonProperty("TOBACCOAGERESTRICTIONFLAG")]
        public IEnumerable<string> TobaccoAgeRestrictionFlag { get; } = new List<string>();

        [JsonProperty("TYPE")]
        public IEnumerable<string> Type { get; } = new List<string>();

        [JsonProperty("DISPLAYREVIEWS")]
        public IEnumerable<string> Displayreviews { get; } = new List<string>();
    }

    public partial class Price
    {
        [JsonProperty("listPrice")]
        public double? ListPrice { get; set; }

        [JsonProperty("offerPrice")]
        public double OfferPrice { get; set; }

        [JsonProperty("isNaN")]
        public bool IsNaN { get; set; }

        [JsonProperty("dollarValue")]
        public long DollarValue { get; set; }

        [JsonProperty("centValue")]
        public long CentValue { get; set; }
    }

    public partial class SearchInfo
    {
        [JsonProperty("pageSize")]
        public long PageSize { get; set; }

        [JsonProperty("searchTerm")]
        public string? SearchTerm { get; set; }

        [JsonProperty("categoryId")]
        public string? CategoryId { get; set; }

        [JsonProperty("searchType")]
        public long SearchType { get; set; }

        [JsonProperty("manufacturer")]
        public string? Manufacturer { get; set; }

        [JsonProperty("profileName")]
        public string? ProfileName { get; set; }

        [JsonProperty("searchSource")]
        public string? SearchSource { get; set; }

        [JsonProperty("intentSearchTerm")]
        public string? IntentSearchTerm { get; set; }

        [JsonProperty("originalSearchTerm")]
        public string? OriginalSearchTerm { get; set; }

        [JsonProperty("metaData")]
        public string? MetaData { get; set; }

        [JsonProperty("currency")]
        public string? Currency { get; set; }

        [JsonProperty("filterTerm")]
        public string? FilterTerm { get; set; }

        [JsonProperty("filterType")]
        public string? FilterType { get; set; }

        [JsonProperty("filterFacet")]
        public string? FilterFacet { get; set; }

        [JsonProperty("maxPrice")]
        public string? MaxPrice { get; set; }

        [JsonProperty("minPrice")]
        public string? MinPrice { get; set; }

        [JsonProperty("orderBy")]
        public string? OrderBy { get; set; }

        [JsonProperty("physicalStoreIds")]
        public string? PhysicalStoreIds { get; set; }

        [JsonProperty("advancedFacetList")]
        public string? AdvancedFacetList { get; set; }

        [JsonProperty("pageView")]
        public string? PageView { get; set; }

        [JsonProperty("personaliseSearch")]
        public bool PersonaliseSearch { get; set; }

        [JsonProperty("personaliseSort")]
        public bool PersonaliseSort { get; set; }

        [JsonProperty("responseTemplate")]
        public string? ResponseTemplate { get; set; }

        [JsonProperty("currentPage")]
        public long CurrentPage { get; set; }

        [JsonProperty("totalCount")]
        public long TotalCount { get; set; }

        [JsonProperty("showAddAllResults")]
        public bool ShowAddAllResults { get; set; }

        [JsonProperty("params")]
        public Params? Params { get; set; }
    }

    public partial class Params
    {
    }

    public enum PromoType { MultibuyMultiSku, MultibuySingleSku };

    public enum TicketType
    {
        M,
        MZero,
        MOne,
        SZero,
        SOne,
        STenZero,
        SFifteenZero,
        STwentyZero,
        STwentyFiveZero,
        SThirtyZero,
        SFourtyZero,
        SFiftyZero,
        V,
        VZero,
        XZero
    }

    public class TicketTypeConverter : JsonConverter<TicketType>
    {
        private static readonly IDictionary<TicketType, string> ticketTypeToString = new Dictionary<TicketType, string>
        {
            [TicketType.M] = "M",
            [TicketType.MZero] = "M_0",
            [TicketType.MOne] = "M_1",
            [TicketType.SZero] = "S_0",
            [TicketType.SOne] = "S_1",
            [TicketType.STenZero] = "S10_0",
            [TicketType.SFifteenZero] = "S15_0",
            [TicketType.STwentyZero] = "S20_0",
            [TicketType.STwentyFiveZero] = "S25_0",
            [TicketType.SThirtyZero] = "S30_0",
            [TicketType.SFourtyZero] = "S40_0",
            [TicketType.SFiftyZero] = "S50_0",
            [TicketType.V] = "V",
            [TicketType.VZero] = "V_0",
            [TicketType.XZero] = "X_0",
        }.ToImmutableDictionary();

        private static readonly IDictionary<string, TicketType> stringToTicketType = ticketTypeToString
               .Select(kvp => KeyValuePair.Create(kvp.Value, kvp.Key))
               .ToImmutableDictionary();

        public override TicketType ReadJson(JsonReader reader, Type objectType, TicketType existingValue, bool hasExistingValue, JsonSerializer serializer)
        {
            #region null checks
            if (reader is null)
            {
                throw new ArgumentNullException(nameof(reader));
            }

            if (objectType is null)
            {
                throw new ArgumentNullException(nameof(objectType));
            }

            if (serializer is null)
            {
                throw new ArgumentNullException(nameof(serializer));
            }
            #endregion

            var stringValue = reader.Value;

            if (stringValue is null)
            {
                throw new JsonReaderException($"Unable to read null value as {nameof(TicketType)}");
            }

            if (reader.TokenType != JsonToken.String)
            {
                throw new JsonReaderException($"Unable to read {reader.TokenType} value as {nameof(TicketType)}");
            }

            if (!stringToTicketType.TryGetValue((string)stringValue, out var ticketType))
            {
                throw new JsonReaderException($"Unable to read unknown value \"{stringValue}\" as {nameof(TicketType)}");
            }

            return ticketType;
        }

        public override void WriteJson(JsonWriter writer, TicketType value, JsonSerializer serializer)
        {
            #region null checks
            if (writer is null)
            {
                throw new ArgumentNullException(nameof(writer));
            }

            if (serializer is null)
            {
                throw new ArgumentNullException(nameof(serializer));
            }
            #endregion

            if (!ticketTypeToString.TryGetValue(value, out var stringValue))
            {
                throw new JsonReaderException($"Unable to write unknown {nameof(TicketType)} value \"{value}\"");
            }

            writer.WriteValue(stringValue);
        }
    }
}
