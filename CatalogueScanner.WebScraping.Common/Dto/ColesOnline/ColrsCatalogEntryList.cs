// Originally generated by quicktype (https://quicktype.io/), then manually cleaned up

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace CatalogueScanner.WebScraping.Common.Dto.ColesOnline
{
    public partial class ColrsCatalogEntryList
    {
        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("categories")]
        public Categories Categories { get; set; }

        [JsonPropertyName("facets")]
        public List<Facet> Facets { get; set; }

        [JsonPropertyName("products")]
        public List<Product> Products { get; set; }

        [JsonPropertyName("searchInfo")]
        public SearchInfo SearchInfo { get; set; }
    }

    public partial class Categories
    {
        [JsonPropertyName("parentCatgroup_id_search")]
        public Dictionary<string, string> ParentCatgroupIdSearch { get; set; }
    }

    public partial class Facet
    {
        [JsonPropertyName("values")]
        public List<Value> Values { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("showEspot")]
        public bool ShowEspot { get; set; }
    }

    public partial class Value
    {
        [JsonPropertyName("count")]
        public long Count { get; set; }

        [JsonPropertyName("label")]
        public string Label { get; set; }

        [JsonPropertyName("value")]
        public string ValueValue { get; set; }
    }

    [JsonNumberHandling(JsonNumberHandling.AllowReadingFromString)]
    public partial class Product
    {
        [JsonPropertyName("price")]
        public Price Price { get; set; }

        [JsonPropertyName("attributesMap")]
        public AttributesMap AttributesMap { get; set; }

        [JsonPropertyName("shortDescription")]
        public string ShortDescription { get; set; }

        [JsonPropertyName("singleSKUCatalogEntryID")]
        public string SingleSkuCatalogEntryId { get; set; }

        [JsonPropertyName("manufacturer")]
        public string Manufacturer { get; set; }

        [JsonPropertyName("name")]
        public string Name { get; set; }

        [JsonPropertyName("partNumber")]
        public string PartNumber { get; set; }

        [JsonPropertyName("seoToken")]
        public string SeoToken { get; set; }

        [JsonPropertyName("thumbnail")]
        public string Thumbnail { get; set; }

        [JsonPropertyName("uniqueID")]

        public string UniqueId { get; set; }

        [JsonPropertyName("purchaseLimit")]
        public string PurchaseLimit { get; set; }

        [JsonPropertyName("unitPrice")]
        public string UnitPrice { get; set; }

        [JsonPropertyName("tickettype")]
        [JsonConverter(typeof(TicketTypeConverter))]
        public TicketType TicketType { get; set; }

        [JsonPropertyName("promo_min_qty")]

        public string PromoMinQty { get; set; }

        [JsonPropertyName("promo_reward")]
        public string PromoReward { get; set; }

        [JsonPropertyName("promo_type")]
        [JsonConverter(typeof(JsonStringEnumConverter))]
        public PromoType? PromoType { get; set; }

        [JsonPropertyName("promo_desc")]
        public string PromoDesc { get; set; }

        [JsonPropertyName("promo_id")]

        public string PromoId { get; set; }

        [JsonPropertyName("available")]
        public bool? Available { get; set; }

        [JsonPropertyName("rating")]
        public string Rating { get; set; }

        [JsonPropertyName("reviews")]
        public long Reviews { get; set; }
    }

    public partial class AttributesMap
    {
        [JsonPropertyName("AVERAGESIZE")]
        public List<string> AverageSize { get; set; }

        [JsonPropertyName("DELIVERYRESTRICTIONS")]
        public List<string> DeliveryRestrictions { get; set; }

        [JsonPropertyName("ONLINESIZEDESCRIPTION")]
        public List<string> OnlinesizeDescription { get; set; }

        [JsonPropertyName("LIQUORAGERESTRICTIONFLAG")]
        public List<string> LiquorAgeRestrictionFlag { get; set; }

        [JsonPropertyName("PRIMARYAISLE")]
        public List<string> PrimaryAisle { get; set; }

        [JsonPropertyName("WEIGHTEDITEMINDICATOR")]
        public List<string> WeightedItemIndicator { get; set; }

        [JsonPropertyName("EXCLUDEFROMSUBSTITUTIONFLAG")]
        public List<string> ExcludeFromSubstitutionFlag { get; set; }

        [JsonPropertyName("TOBACCOAGERESTRICTIONFLAG")]
        public List<string> TobaccoAgeRestrictionFlag { get; set; }

        [JsonPropertyName("TYPE")]
        public List<string> Type { get; set; }

        [JsonPropertyName("DISPLAYREVIEWS")]
        public List<string> Displayreviews { get; set; }
    }

    [JsonNumberHandling(JsonNumberHandling.AllowReadingFromString)]
    public partial class Price
    {
        [JsonPropertyName("listPrice")]
        public double ListPrice { get; set; }

        [JsonPropertyName("offerPrice")]
        public double OfferPrice { get; set; }

        [JsonPropertyName("isNaN")]
        public bool IsNaN { get; set; }

        [JsonPropertyName("dollarValue")]

        public long DollarValue { get; set; }

        [JsonPropertyName("centValue")]
        public long CentValue { get; set; }
    }

    [JsonNumberHandling(JsonNumberHandling.AllowReadingFromString)]
    public partial class SearchInfo
    {
        [JsonPropertyName("pageSize")]
        public long PageSize { get; set; }

        [JsonPropertyName("searchTerm")]
        public string SearchTerm { get; set; }

        [JsonPropertyName("categoryId")]
        public string CategoryId { get; set; }

        [JsonPropertyName("searchType")]
        public long SearchType { get; set; }

        [JsonPropertyName("manufacturer")]
        public string Manufacturer { get; set; }

        [JsonPropertyName("profileName")]
        public string ProfileName { get; set; }

        [JsonPropertyName("searchSource")]
        public string SearchSource { get; set; }

        [JsonPropertyName("intentSearchTerm")]
        public string IntentSearchTerm { get; set; }

        [JsonPropertyName("originalSearchTerm")]
        public string OriginalSearchTerm { get; set; }

        [JsonPropertyName("metaData")]
        public string MetaData { get; set; }

        [JsonPropertyName("currency")]
        public string Currency { get; set; }

        [JsonPropertyName("filterTerm")]
        public string FilterTerm { get; set; }

        [JsonPropertyName("filterType")]
        public string FilterType { get; set; }

        [JsonPropertyName("filterFacet")]
        public string FilterFacet { get; set; }

        [JsonPropertyName("maxPrice")]
        public string MaxPrice { get; set; }

        [JsonPropertyName("minPrice")]
        public string MinPrice { get; set; }

        [JsonPropertyName("orderBy")]
        public string OrderBy { get; set; }

        [JsonPropertyName("physicalStoreIds")]
        public string PhysicalStoreIds { get; set; }

        [JsonPropertyName("advancedFacetList")]
        public string AdvancedFacetList { get; set; }

        [JsonPropertyName("pageView")]
        public string PageView { get; set; }

        [JsonPropertyName("personaliseSearch")]
        [JsonConverter(typeof(StringBooleanConverter))]
        public bool PersonaliseSearch { get; set; }

        [JsonPropertyName("personaliseSort")]
        [JsonConverter(typeof(StringBooleanConverter))]
        public bool PersonaliseSort { get; set; }

        [JsonPropertyName("responseTemplate")]
        public string ResponseTemplate { get; set; }

        [JsonPropertyName("currentPage")]
        public long CurrentPage { get; set; }

        [JsonPropertyName("totalCount")]
        public long TotalCount { get; set; }

        [JsonPropertyName("showAddAllResults")]
        public bool ShowAddAllResults { get; set; }

        [JsonPropertyName("params")]
        public Params Params { get; set; }

        //[JsonPropertyName("suggestedterms")]
        //public object Suggestedterms { get; set; }
    }

    public partial class Params
    {
    }

    public enum PromoType { MultibuyMultiSku, MultibuySingleSku };

    public enum TicketType { M, M1, S0, S1 };

    public class TicketTypeConverter : JsonConverter<TicketType>
    {
        public override TicketType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            #region null checks
            if (typeToConvert is null)
            {
                throw new ArgumentNullException(nameof(typeToConvert));
            }

            if (options is null)
            {
                throw new ArgumentNullException(nameof(options));
            }
            #endregion

            var stringValue = reader.GetString();

            if (stringValue is null)
            {
                throw new JsonException($"Unable to read null value as {nameof(TicketType)}");
            }

            return stringValue switch
            {
                "M" => TicketType.M,
                "M_1" => TicketType.M1,
                "S_0" => TicketType.S0,
                "S_1" => TicketType.S1,
                _ => throw new JsonException($"Unable to read unknown value \"{stringValue}\" as {nameof(TicketType)}"),
            };
        }

        public override void Write(Utf8JsonWriter writer, TicketType value, JsonSerializerOptions options)
        {
            #region null checks
            if (writer is null)
            {
                throw new ArgumentNullException(nameof(writer));
            }

            if (options is null)
            {
                throw new ArgumentNullException(nameof(options));
            }
            #endregion

            var stringValue = value switch
            {
                TicketType.M => "M",
                TicketType.M1 => "M_1",
                TicketType.S0 => "S_0",
                TicketType.S1 => "S_1",
                _ => throw new JsonException($"Unable to write unknown {nameof(TicketType)} value \"{value}\""),
            };

            writer.WriteStringValue(stringValue);
        }
    }

    public class StringBooleanConverter : JsonConverter<bool>
    {
        public override bool Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            #region null checks
            if (typeToConvert is null)
            {
                throw new ArgumentNullException(nameof(typeToConvert));
            }

            if (options is null)
            {
                throw new ArgumentNullException(nameof(options));
            }
            #endregion

            var stringValue = reader.GetString();

            if (stringValue is null)
            {
                throw new JsonException($"Unable to read null value as {nameof(Boolean)}");
            }

            return stringValue switch
            {
                "true" => true,
                "false" => false,
                _ => throw new JsonException($"Unable to read unknown value \"{stringValue}\" as {nameof(Boolean)}"),
            };
        }

        public override void Write(Utf8JsonWriter writer, bool value, JsonSerializerOptions options)
        {
            #region null checks
            if (writer is null)
            {
                throw new ArgumentNullException(nameof(writer));
            }

            if (options is null)
            {
                throw new ArgumentNullException(nameof(options));
            }
            #endregion

            writer.WriteStringValue(value ? "true" : "false");
        }
    }
}
