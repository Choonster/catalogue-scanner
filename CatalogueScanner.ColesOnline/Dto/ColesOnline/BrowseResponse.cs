// Originally generated by quicktype (https://quicktype.io/), then manually cleaned up

using System.Text.Json;
using System.Text.Json.Serialization;

namespace CatalogueScanner.ColesOnline.Dto.ColesOnline
{
    public partial class BrowseResponse
    {
        public PageProps? PageProps { get; set; }
    }

    public partial class PageProps
    {
        public Uri? AssetsUrl { get; set; }
        public bool IsMobile { get; set; }
        public SearchResults? SearchResults { get; set; }
        public Guid SearchSessionId { get; set; }
    }

    public partial class SearchResults
    {
        public object? DidYouMean { get; set; }
        public long NoOfResults { get; set; }
        public long Start { get; set; }
        public long PageSize { get; set; }
        public string? Keyword { get; set; }
        public long ResultType { get; set; }
        public IEnumerable<Filter> Filters { get; set; } = new List<Filter>();
        public IEnumerable<Banner> Banners { get; set; } = new List<Banner>();
        public PageRestrictions? PageRestrictions { get; set; }
        public IEnumerable<SearchResult> Results { get; set; } = new List<SearchResult>();
        public IEnumerable<CatalogGroupView> CatalogGroupView { get; set; } = new List<CatalogGroupView>();
        public ExcludedCatalogGroupView? ExcludedCatalogGroupView { get; set; }
    }

    public partial class Banner
    {
        public string? AdId { get; set; }
        public string? AdSource { get; set; }
        public string? CampaignName { get; set; }
        public DateTimeOffset Expiry { get; set; }
        public string? HeadingText { get; set; }
        public string? BannerText { get; set; }
        public string? BannerTextColour { get; set; }
        public bool CtaFlag { get; set; }
        public string? CtaText { get; set; }
        public string? CtaTextAccessibility { get; set; }
        public string? CtaLink { get; set; }
        public Uri? BackgroundImage { get; set; }
        public string? BackgroundImagePosition { get; set; }
        public Uri? HeroImage { get; set; }
        public string? HeroImageAltText { get; set; }
        
        [JsonNumberHandling(JsonNumberHandling.AllowReadingFromString)]
        public IEnumerable<long> ProductIds { get; set; } = new List<long>();
        public IEnumerable<AdditionalField> AdditionalFields { get; set; } = new List<AdditionalField>();
    }

    public partial class AdditionalField
    {
        public string? Id { get; set; }

        public string? Value { get; set; }
    }

    public partial class CatalogGroupView
    {
        public long Level { get; set; }
        public string? Name { get; set; }
        public string? SeoToken { get; set; }
        
        [JsonNumberHandling(JsonNumberHandling.AllowReadingFromString)]
        public long Id { get; set; }

        public long ProductCount { get; set; }
    }

    public partial class ExcludedCatalogGroupView
    {
        public long ProductCount { get; set; }
    }

    public partial class Filter
    {
        public string? Name { get; set; }
        public IEnumerable<FilterValue> Values { get; set; } = new List<FilterValue>();
    }

    public partial class FilterValue
    {
        public string? Id { get; set; }
        public string? DisplayText { get; set; }
        public long Count { get; set; }
    }

    public partial class PageRestrictions
    {
        public bool TobaccoProducts { get; set; }
    }

    [JsonConverter(typeof(SearchResultConverter))]
    public abstract partial class SearchResult
    {
        internal const string TypePropertyName = "_type";

        [JsonPropertyName(TypePropertyName)]
        public abstract string Type { get; }
        public string? AdId { get; set; }
        public string? AdSource { get; set; }
    }

    public partial class Product : SearchResult
    {
        public const string ProductType = "PRODUCT";

        public override string Type => ProductType;

        public long Id { get; set; }
        public bool Featured { get; set; }
        public string? Name { get; set; }
        public string? Brand { get; set; }
        public string? Description { get; set; }
        public string? InternalDescription { get; set; }
        public string? Size { get; set; }
        public bool Availability { get; set; }
        public AvailabilityType? AvailabilityType { get; set; }
        public IEnumerable<ImageUri> ImageUris { get; set; } = new List<ImageUri>();
        public IEnumerable<Location> Locations { get; set; } = new List<Location>();
        public Restrictions? Restrictions { get; set; }
        public MerchandiseHeir? MerchandiseHeir { get; set; }
        public IEnumerable<OnlineHeir> OnlineHeirs { get; set; } = new List<OnlineHeir>();
        public Pricing? Pricing { get; set; }
    }

    public partial class SingleTile : SearchResult
    {
        public const string SingleTileType = "SINGLE_TILE";

        public override string Type => SingleTileType;

        public string? BackgroundColour { get; set; }
        public Uri? BackgroundImage { get; set; }
        public string? BackgroundImagePosition { get; set; }
        public string? BannerText { get; set; }
        public string? BannerTextColour { get; set; }
        public string? CampaignName { get; set; }
        public bool? CtaFlag { get; set; }
        public string? CtaText { get; set; }
        public string? CtaTextAccessibility { get; set; }
        public string? CtaLink { get; set; }
        public DateTimeOffset? Expiry { get; set; }
        public string? HeadingText { get; set; }
        public object? HeroImage { get; set; }
        public string? HeroImageAltText { get; set; }

        [JsonNumberHandling(JsonNumberHandling.AllowReadingFromString)]
        public IEnumerable<long> ProductIds { get; set; } = new List<long>();

        public object? SecondaryBackgroundImage { get; set; }
        public object? SecondaryBackgroundImagePosition { get; set; }
        public object? SecondaryHeroImage { get; set; }
        public object? SecondaryHeroImageAltText { get; set; }
        public IEnumerable<AdditionalField> AdditionalFields { get; set; } = new List<AdditionalField>();
    }

    public partial class ImageUri
    {
        public string? AltText { get; set; }
        public ImageUriType Type { get; set; }
        public Uri? Uri { get; set; }
    }

    public partial class Location
    {
        public string? AisleSide { get; set; }
        public string? Description { get; set; }
        public long Facing { get; set; }
        public string? Aisle { get; set; }
        public long Order { get; set; }
        public object? Shelf { get; set; }
    }

    public partial class MerchandiseHeir
    {
        public TradeProfitCentre TradeProfitCentre { get; set; }
        public string? CategoryGroup { get; set; }
        public string? Category { get; set; }
        public string? SubCategory { get; set; }
        public string? ClassName { get; set; }
    }

    public partial class OnlineHeir
    {
        public string? Aisle { get; set; }
        public string? Category { get; set; }
        public string? SubCategory { get; set; }
    }

    public partial class Pricing
    {
        public decimal Now { get; set; }
        public decimal? Was { get; set; }
        public decimal? SaveAmount { get; set; }
        public string? SaveStatement { get; set; }
        public Unit? Unit { get; set; }
        public string? Comparable { get; set; }
        public PromotionType? PromotionType { get; set; }
        public bool OnlineSpecial { get; set; }
        public string? PriceDescription { get; set; }
        public long? SavePercent { get; set; }
        public SpecialType? SpecialType { get; set; }
        public MultiBuyPromotion? MultiBuyPromotion { get; set; }
    }

    public partial class MultiBuyPromotion
    {
        public MultiBuyPromotionType Type { get; set; }
        public string? Id { get; set; }
        public long MinQuantity { get; set; }
        public decimal Reward { get; set; }
    }

    public partial class Unit
    {
        public decimal Quantity { get; set; }
        public long OfMeasureQuantity { get; set; }
        public UnitType OfMeasureUnits { get; set; }
        public decimal Price { get; set; }
        public UnitType OfMeasureType { get; set; }
        public bool IsWeighted { get; set; }
    }

    public partial class Restrictions
    {
        public long RetailLimit { get; set; }
        public long PromotionalLimit { get; set; }
        public bool? LiquorAgeRestrictionFlag { get; set; }
        public bool? TobaccoAgeRestrictionFlag { get; set; }
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum AvailabilityType
    {
        InStoreOnly,
        InStoreAndOnline,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum ImageUriType
    {
        Default
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum TradeProfitCentre
    {
        [JsonPropertyName("BAKEHOUSE")] Bakehouse,
        [JsonPropertyName("DAIRY")] Dairy,
        [JsonPropertyName("DELI")] Deli,
        [JsonPropertyName("FRESH PROD")] FreshProd,
        [JsonPropertyName("GENERAL MERCHANDISE")] GeneralMerchandise,
        [JsonPropertyName("GROCERY")] Grocery,
        [JsonPropertyName("LIQUOR")] Liquor,
        [JsonPropertyName("MEAT")] Meat,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum PromotionType
    {
        [JsonPropertyName("SPECIAL")] Special,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum SpecialType
    {
        [JsonPropertyName("PERCENT_OFF")] PercentOff,
        [JsonPropertyName("MULTI_SAVE")] MultiSave,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum UnitType
    {
        [JsonPropertyName("ea")] Each,
        [JsonPropertyName("g")] Gram,
        [JsonPropertyName("kg")] Kilogram,
        [JsonPropertyName("ml")] Millilitre,
        [JsonPropertyName("l")] Litre,
        [JsonPropertyName("m")] Metre,
    }

    [JsonConverter(typeof(JsonStringEnumMemberConverter))]
    public enum MultiBuyPromotionType
    {
        MultibuyMultiSku,
        MultibuySingleSku
    }

    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1812:AvoidUninstantiatedInternalClasses", Justification = "Instantiated by System.Text.Json using reflection")]
    // This is required because .NET 6 doesn't support polymorphic serialisation in System.Text.Json, it's only supported in .NET 7+.
    internal class SearchResultConverter : JsonConverter<SearchResult>
    {
        public override bool CanConvert(Type typeToConvert) => typeof(SearchResult).IsAssignableFrom(typeToConvert);

        public override SearchResult? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var readerClone = reader;

            if (readerClone.TokenType != JsonTokenType.StartObject)
            {
                throw new JsonException("Expected object");
            }

            readerClone.Read();
            if (readerClone.TokenType != JsonTokenType.PropertyName)
            {
                throw new JsonException($"Expected \"{SearchResult.TypePropertyName}\" property");
            }

            var propertyName = readerClone.GetString();
            if (propertyName != SearchResult.TypePropertyName)
            {
                throw new JsonException($"Expected \"{SearchResult.TypePropertyName}\" property");
            }

            readerClone.Read();
            if (readerClone.TokenType != JsonTokenType.String)
            {
                throw new JsonException($"Expected \"{SearchResult.TypePropertyName}\" property to be type string");
            }

            var context = new ColesOnlineInternalSerializerContext(new JsonSerializerOptions(options));

            var type = readerClone.GetString()!;

            return type switch
            {
                Product.ProductType => JsonSerializer.Deserialize(ref reader, context.Product)!,
                SingleTile.SingleTileType => JsonSerializer.Deserialize(ref reader, context.SingleTile)!,
                _ => throw new JsonException($"Unexpected \"{SearchResult.TypePropertyName}\" value \"{type}\"")
            };
        }

        public override void Write(Utf8JsonWriter writer, SearchResult value, JsonSerializerOptions options)
        {
            var context = new ColesOnlineInternalSerializerContext(new JsonSerializerOptions(options));

            switch (value)
            {
                case Product product:
                    JsonSerializer.Serialize(writer, product, context.Product);
                    break;
                case SingleTile singleTile:
                    JsonSerializer.Serialize(writer, singleTile, context.SingleTile);
                    break;
                default:
                    throw new JsonException($"Unsupported {nameof(SearchResult)} implementation {value.GetType().FullName}");
            }
        }
    }
}
